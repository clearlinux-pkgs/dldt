From 04bfa2e37c957256d5a27fd3066ff9f85a06ae91 Mon Sep 17 00:00:00 2001
From: Arjan van de Ven <arjan@linux.intel.com>
Date: Wed, 24 Oct 2018 10:09:33 -0700
Subject: [PATCH] Build fixes.

---
 inference-engine/CMakeLists.txt                     | 10 ++++++++++
 inference-engine/cmake/config.cmake.in              | 12 ++++++++++--
 inference-engine/cmake/linux_name.cmake             |  2 +-
 inference-engine/cmake/os_flags.cmake               |  2 +-
 .../cmake/share/InferenceEngineConfig.cmake         |  2 +-
 inference-engine/ie_bridges/python/CMakeLists.txt   |  8 +++++++-
 .../python/inference_engine/CMakeLists.txt          |  7 ++++++-
 inference-engine/samples/CMakeLists.txt             |  2 +-
 inference-engine/src/extension/CMakeLists.txt       |  1 +
 .../src/inference_engine/CMakeLists.txt             | 13 ++++++++++---
 .../thirdparty/mkl-dnn/cmake/platform.cmake         |  4 ++--
 11 files changed, 50 insertions(+), 13 deletions(-)

diff --git a/inference-engine/CMakeLists.txt b/inference-engine/CMakeLists.txt
index 2f561d9..6d15d21 100644
--- a/inference-engine/CMakeLists.txt
+++ b/inference-engine/CMakeLists.txt
@@ -127,6 +127,16 @@ endif(UNIX)
 add_subdirectory(src)
 add_subdirectory(tests)
 add_subdirectory(thirdparty)
+
+option(ENABLE_PYTHON_BINDINGS "Build python bindings." OFF)
+if (ENABLE_PYTHON_BINDINGS)
+    set(InferenceEngine_DIR "${CMAKE_BINARY_DIR}")
+
+    #to be able to link
+    set (LIB_FOLDER ${IE_MAIN_SOURCE_DIR}/${BIN_FOLDER}/${CMAKE_BUILD_TYPE}/lib)
+    add_subdirectory(ie_bridges/python)
+endif()
+
 if (ENABLE_SAMPLES_CORE)
     set(InferenceEngine_DIR "${CMAKE_BINARY_DIR}")
 
diff --git a/inference-engine/cmake/config.cmake.in b/inference-engine/cmake/config.cmake.in
index a17d6da..02e6928 100644
--- a/inference-engine/cmake/config.cmake.in
+++ b/inference-engine/cmake/config.cmake.in
@@ -3,9 +3,17 @@
 #
 if(DEFINED IE_MAIN_SOURCE_DIR AND TARGET inference_engine)
     set(InferenceEngine_INCLUDE_DIRS ${IE_MAIN_SOURCE_DIR}/include)
-    set(InferenceEngine_LIBRARIES inference_engine)
+    if(NOT(UNIX))
+        set(InferenceEngine_LIBRARIES IE::inference_engine)
+    else()
+        set(InferenceEngine_LIBRARIES inference_engine)
+    endif()
 else()
     include("${CMAKE_CURRENT_LIST_DIR}/targets.cmake")
     get_target_property(InferenceEngine_INCLUDE_DIRS IE::inference_engine INTERFACE_INCLUDE_DIRECTORIES)
-    set(InferenceEngine_LIBRARIES IE::inference_engine)
+    if(NOT(UNIX))
+        set(InferenceEngine_LIBRARIES IE::inference_engine)
+    else()
+        set(InferenceEngine_LIBRARIES inference_engine)
+    endif()
 endif()
diff --git a/inference-engine/cmake/linux_name.cmake b/inference-engine/cmake/linux_name.cmake
index 78b0c50..efd084f 100644
--- a/inference-engine/cmake/linux_name.cmake
+++ b/inference-engine/cmake/linux_name.cmake
@@ -8,7 +8,7 @@ cmake_minimum_required(VERSION 2.8)
 if (UNIX)
     function(get_linux_name res_var)
         if (NOT EXISTS "/etc/lsb-release")
-            execute_process(COMMAND find /etc/ -maxdepth 1 -type f -name *-release -exec cat {} \;
+            execute_process(COMMAND find /usr/lib/ -maxdepth 1 -type f -name *-release -exec cat {} \;
                     OUTPUT_VARIABLE release_data RESULT_VARIABLE result)
             set(name_regex "NAME=\"([^ \"\n]*).*\"\n")
             set(version_regex "VERSION=\"([0-9]+(\\.[0-9]+)?)[^\n]*\"")
diff --git a/inference-engine/cmake/os_flags.cmake b/inference-engine/cmake/os_flags.cmake
index 7069847..ed76818 100644
--- a/inference-engine/cmake/os_flags.cmake
+++ b/inference-engine/cmake/os_flags.cmake
@@ -9,7 +9,7 @@ if (WIN32)
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc") #no asynchronous structured exception handling
 	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /LARGEADDRESSAWARE")
 else()
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror -Werror=return-type ")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -Werror=return-type ")
     if (APPLE)
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-error=unused-command-line-argument")
     elseif(UNIX)
diff --git a/inference-engine/cmake/share/InferenceEngineConfig.cmake b/inference-engine/cmake/share/InferenceEngineConfig.cmake
index 59d8260..f530f3d 100644
--- a/inference-engine/cmake/share/InferenceEngineConfig.cmake
+++ b/inference-engine/cmake/share/InferenceEngineConfig.cmake
@@ -57,7 +57,7 @@ else()
             set(_OS_PATH "")
         else()
            if (NOT EXISTS "/etc/lsb-release")
-                execute_process(COMMAND find /etc/ -maxdepth 1 -type f -name *-release -exec cat {} \;
+                execute_process(COMMAND find /usr/lib/ -maxdepth 1 -type f -name *-release -exec cat {} \;
                             OUTPUT_VARIABLE release_data RESULT_VARIABLE result)
                 set(name_regex "NAME=\"([^ \"\n]*).*\"\n")
                 set(version_regex "VERSION=\"([0-9]+(\\.[0-9]+)?)[^\n]*\"")
diff --git a/inference-engine/ie_bridges/python/CMakeLists.txt b/inference-engine/ie_bridges/python/CMakeLists.txt
index 0fed229..e4d3449 100644
--- a/inference-engine/ie_bridges/python/CMakeLists.txt
+++ b/inference-engine/ie_bridges/python/CMakeLists.txt
@@ -13,6 +13,8 @@ set (IE_DEFAULT_PATH computer_vision_sdk/deployment_tools/inference_engine/share
 
 find_package(InferenceEngine REQUIRED PATHS /opt/intel/${IE_DEFAULT_PATH} $ENV{HOME}/intel/${IE_DEFAULT_PATH})
 
+link_directories(${LIB_FOLDER})
+
 # Make the scripts available in the 'cmake' directory available for the
 # 'include()' command, 'find_package()' command.
 set( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_LIST_DIR}/cmake )
@@ -36,7 +38,11 @@ add_custom_target( CopyIeLibs ${CMAKE_COMMAND} -P
   ${IE_ROOT_DIR}/bin/${_ARCH}/Release ${_IE_ROOT_LIBRARY}
   WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/ie_driver )
 
-include_directories( IE::inference_engine )
+if(NOT(UNIX))
+    include_directories( IE::inference_engine )
+else()
+    include_directories( ${IE_MAIN_SOURCE_DIR}/include )
+endif()
 
 # Process the CMakeLists.txt in the 'src' and 'bin' directory.
 add_subdirectory( inference_engine )
diff --git a/inference-engine/ie_bridges/python/inference_engine/CMakeLists.txt b/inference-engine/ie_bridges/python/inference_engine/CMakeLists.txt
index 2835e04..f94e1da 100644
--- a/inference-engine/ie_bridges/python/inference_engine/CMakeLists.txt
+++ b/inference-engine/ie_bridges/python/inference_engine/CMakeLists.txt
@@ -33,7 +33,12 @@ cython_add_module(
     ie_api.pyx
 )
 
-target_link_libraries(ie_api PRIVATE IE::inference_engine)
+if(NOT(UNIX))
+    target_link_libraries(ie_api PRIVATE IE::inference_engine)
+else()
+    target_link_libraries(ie_api PRIVATE inference_engine)
+endif()
+
 set_target_properties(ie_api PROPERTIES CXX_STANDARD 11 LINKER_LANGUAGE CXX)
 
 #if (NOT UNIX AND ${PYTHON_VERSION_STRING} MATCHES "^1.4")
diff --git a/inference-engine/samples/CMakeLists.txt b/inference-engine/samples/CMakeLists.txt
index 8360a77..630ec30 100644
--- a/inference-engine/samples/CMakeLists.txt
+++ b/inference-engine/samples/CMakeLists.txt
@@ -73,7 +73,7 @@ if (WIN32)
         endif()
     endif()
 else()
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror -Werror=return-type ")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror=return-type ")
     if (APPLE)
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-error=unused-command-line-argument")
     elseif(UNIX)
diff --git a/inference-engine/src/extension/CMakeLists.txt b/inference-engine/src/extension/CMakeLists.txt
index 6642ea1..9caa1cd 100644
--- a/inference-engine/src/extension/CMakeLists.txt
+++ b/inference-engine/src/extension/CMakeLists.txt
@@ -9,6 +9,7 @@ file(GLOB_RECURSE HDR *.hpp)
 if(WIN32)
     add_definitions(-DIMPLEMENT_INFERENCE_ENGINE_API)
 endif()
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp ")
 
 include_directories (PRIVATE
         ${CMAKE_CURRENT_SOURCE_DIR}/common
diff --git a/inference-engine/src/inference_engine/CMakeLists.txt b/inference-engine/src/inference_engine/CMakeLists.txt
index 3f4d678..8741e51 100644
--- a/inference-engine/src/inference_engine/CMakeLists.txt
+++ b/inference-engine/src/inference_engine/CMakeLists.txt
@@ -61,7 +61,7 @@ target_include_directories(${TARGET_NAME} SYSTEM PRIVATE "${IE_MAIN_SOURCE_DIR}/
 target_include_directories(${TARGET_NAME} SYSTEM PRIVATE "${IE_MAIN_SOURCE_DIR}/thirdparty/ade/ade/include")
 target_include_directories(${TARGET_NAME} SYSTEM PRIVATE "${IE_MAIN_SOURCE_DIR}/thirdparty/ade/common/include")
 
-set_target_properties(${TARGET_NAME} PROPERTIES COMPILE_PDB_NAME ${TARGET_NAME})
+set_target_properties(${TARGET_NAME} PROPERTIES COMPILE_PDB_NAME ${TARGET_NAME} SOVERSION 1)
 
 # Static library used for unit tests which are always built
 
@@ -81,7 +81,7 @@ target_include_directories(${TARGET_NAME}_s SYSTEM PRIVATE "${IE_MAIN_SOURCE_DIR
 
 target_compile_definitions(${TARGET_NAME}_s PUBLIC -DUSE_STATIC_IE)
 
-set_target_properties(${TARGET_NAME}_s PROPERTIES COMPILE_PDB_NAME ${TARGET_NAME}_s)
+set_target_properties(${TARGET_NAME}_s PROPERTIES COMPILE_PDB_NAME ${TARGET_NAME}_s SOVERSION 1)
 
 # export targets
 
@@ -95,4 +95,11 @@ configure_file(
 configure_file(
     "${CMAKE_SOURCE_DIR}/cmake/share/InferenceEngineConfig-version.cmake"
     "${CMAKE_BINARY_DIR}/InferenceEngineConfig-version.cmake"
-    COPYONLY)
\ No newline at end of file
+    COPYONLY)
+
+install(TARGETS ${TARGET_NAME} LIBRARY DESTINATION lib64)
+install(FILES ${PUBLIC_HEADERS} DESTINATION include/${TARGET_NAME})
+install(FILES
+    "${CMAKE_BINARY_DIR}/InferenceEngineConfig.cmake"
+    "${CMAKE_BINARY_DIR}/InferenceEngineConfig-version.cmake"
+    DESTINATION ${CMAKE_INSTALL_PREFIX}/share/cmake/Modules)
diff --git a/inference-engine/thirdparty/mkl-dnn/cmake/platform.cmake b/inference-engine/thirdparty/mkl-dnn/cmake/platform.cmake
index fa51aa7..e2f22c7 100644
--- a/inference-engine/thirdparty/mkl-dnn/cmake/platform.cmake
+++ b/inference-engine/thirdparty/mkl-dnn/cmake/platform.cmake
@@ -53,10 +53,10 @@ if(WIN32 AND NOT MINGW)
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Qdiag-disable:15552")
     endif()
 elseif(UNIX OR APPLE OR MINGW)
-    set(CMAKE_CCXX_FLAGS "${CMAKE_CCXX_FLAGS} -Wall -Werror -Wno-unknown-pragmas")
+    set(CMAKE_CCXX_FLAGS "${CMAKE_CCXX_FLAGS} -Wall -Wno-unknown-pragmas")
     set(CMAKE_CCXX_FLAGS "${CMAKE_CCXX_FLAGS} -fvisibility=internal")
     set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99")
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -fvisibility-inlines-hidden")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11 -fvisibility-inlines-hidden")
     # compiler specific settings
     if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
         # Clang cannot vectorize some loops with #pragma omp simd and gets
-- 
2.19.1

